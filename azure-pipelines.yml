trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  projectName: 'kata1_StringCalculator'
  coverletOptions: '--exclude "[xunit.*]*" --exclude "[*]*.Program"'

steps:
# Install the latest version of the dotnet sdk
- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core sdk 2.2.300'
  inputs:
    version: 2.2.300

# build all projects
- task: DotNetCoreCLI@2
  displayName: dotnet build
  inputs:
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration)'
    projects: 'kata1_StringCalculator/StringCalculatorTests/*.csproj'
    nobuild: true

# Install coverlet as a global tool & generate coverage
- script: |
    dotnet tool install --global coverlet.console
    coverlet $(Build.SourcesDirectory)/kata1_StringCalculator/StringCalculatorTests/bin/$(BuildConfiguration)/netcoreapp2.2/StringCalculatorTests.dll --target "dotnet" --targetargs "test --configuration $(BuildConfiguration) kata1_StringCalculator/StringCalculatorTests/ --no-build" --format cobertura -o StringCalculatorTests\ $(coverletOptions)
  displayName: Create Code coverage report

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
# First install the tool on the machine, then run it
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/kata1_StringCalculator/StringCalculatorTests/StringCalculatorTests.Tests/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:Cobertura 
  displayName: Report Code coverage report

# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'